1. CVS SuperApp sends a POST to /sa/plandocs/v1/list request to APIGW with the member's JWT
1.a. JWT is defined in /Users/n091733/Projects/bb-prescription/Plan_Docs/for_ai/json/id_token_jwt.json

2. APIc GW transforms the JWT id_token
2.a. Validates the JWT
2.b. APIc GW transform the JWT to EIE headers.
2.b.1. EIE headers are definded in /Users/n091733/Projects/bb-prescription/Plan_Docs/for_ai/json/eie_headers_extracted_from_jwt.txt
2.c. Forwards the request with EIE headers to /sa/plandocs/v1/list in CVS bff

3. /sa/plandocs/v1/list on CVS BFF orchestrates the document list retrieval
3.a. First it has to perform the OpenPlatform (SuperApp) application startup sequence (common superapp initializationj)
3.a.1. To get to aetnahealth_applicationstartup the orchestrator has to call /v1/planrgroups on Plan Groups server/GW
3.a.1.A. EIE Headers should be
    Name	Description
    eieheaderusercontext                            required        string          header  eieheaderusercontext
    eieheaderapplicationidentifier                  optional        string          header  eieheaderapplicationidentifier
    eieheaderaction                                 optional        string          header  eieheaderaction
    eieheaderorchestratingapplicationidentifier     optional        string          header  eieheaderorchestratingapplicationidentifier
    eieheaderversion                                optional        string          header  eieheaderversion
    eieheadertransactionid                          optional        string          header  eieheadertransactionid
    x-qapath                                        ?               string          header  x-qapath
    lineOfBusiness                                  ?               array[string]   query   (Commercial, Medicare, Medicaid)
    planSponsorIds                                  ?               array[string]   query   need to be returned in the response
    role                                            ?               string          query   type of relationship need to be returned in the response (Self, Other Relative)
3.a.1.A.i EIE headers in our test derive from postman variables defined in /Users/n091733/Projects/bb-prescription/Plan_Docs/directions/postsman/qa-client_bff-v3_plangroups_select-variables.csv
3.a.1.A.ii Line of Business should be "Commercial"
3.a.1.A.iii role = "self" pulled from EIEHeaders aeieheaderusercontext
3.b. Response captured in 

4. Needs to get the plan group to get the plan groups with the following parameters lineOfBusiness=Commercial for MVP.
5. CVS BFF filters down the response to one plan group based on a given shared requirement for the super app. 

5. From the PlanGroups response CVS-BFF will filter groups:
5.a. Excludes groups with certain plan sponsor IDs (955, 988). 
5.b. Filter for Actively Covered
5.c. Further filters for policies with a primary type of "Dental" or "Medical".

6. `CVS-BFF`  dispatches a post request to MMF v2/features API to check if ["DenServiceLimits", "MedServiceLimits"] are enabled.

6.a. Include parameters: 
{
  "memberships": [
  {
    membershipResourceId: "5~185762462+10+1+20220101+789436+A+1",
    features: [ "DenServiceLimits", "MedServiceLimits"],
    enabledOnly: true,
  },
  {
    membershipResourceId: "5~185762462+10+2+20220101+789436+B+2",
    features: ["DenServiceLimits","MedServiceLimits"],
    enabledOnly: true,
  },
  ]    
}
6.b. The response includes enabled features. Ensure the enabled flag is set to truefor each feature. 
6.c. If none is enabled CVS-BFF returns an empty response status code: 204 No content || 200 OK
6.d. If either of the features is enabled, CVS-BFF makes requests for Medical and Dental plan limits as described below:

7. If MedServiceLimits is enabled we request plan limits for Medical and Dental.
7.a. If DenServiceLimits is enabled we request plan limits for Dental. 
7.b. CVS-BFF (potentially after checking its cache for recent data) prepare the response object by making parallel calls to:
7.c. The accumlators service to retrieves the service usage for Medical and Dental
7.d. Call member service v1/memberships to get  demographic information for the current member. If the current member is the subscriber the, service call will include dependents.
7.e. These calls MUST be dispatched in parallel.  

8. CVS-BFF 
8.a. Receives responses, transforms and constructs  the json array 
"planServices": [{}] where each item includes the information about the service usage.
8.b. Setâ€™s the cache with the appropriate key and TT
8.c. Returns the consolidated data to the API Gateway.
8.d. Adds information in case of partial response under the additionalInformation key. See Shared Docs
8.e. Set the cache as described in the CVS-BFF shared Document. 

9. API Gateway sends the final planServices response back to the CVS Super App.